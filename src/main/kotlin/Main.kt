import kotlin.math.sqrt
import kotlin.system.measureTimeMillis

fun main(args: Array<String>) {
//    SP 4
//    A palindromic number reads the same both ways.
//    The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 Ã— 99.
//    Find the largest palindrome made from the product of two 3-digit numbers.

    val list = mutableListOf<Int>()
    mainLoop@ for (num1 in 999 downTo 100) {
        for (num2 in 999 downTo 100) {
            val checker = (num1 * num2).toString()
            if (checker == checker.reversed()) {
                if (list.isNotEmpty() && checker.toInt() > list[0]) {
                    list.clear()
                    list.add(checker.toInt())
                    list.add(num1)
                    list.add(num2)
                }
                else{
                    list.add(checker.toInt())
                    list.add(num1)
                    list.add(num2)
                }
            }
        }
    }
    println("The largest palindrome made from the product of two 3-digit numbers is: ${list[0]} = ${list[1]} x ${list[2]}")
}


//    SP 1
//If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9.
// The sum of these multiples is 23.
//Find the sum of all the multiples of 3 or 5 below 1000.
//
//    var sum = 0
//    for(it in 1 until 1000){
//        if ( it % 3 == 0 || it % 5 == 0)
//            sum+=it
//    }
//    println(sum)
//


//    SP 2
//    Each new term in the Fibonacci sequence is generated by adding the previous two terms.
//    By starting with 1 and 2, the first 10 terms will be:
//    1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
//    By considering the terms in the Fibonacci sequence whose values do not exceed four million,
//    find the sum of the even-valued terms.
//    sumOfEvenFibonacci(1,2)
//}
//
//fun sumOfEvenFibonacci(x: Int, y:Int, n: Int = 0){
//    var firstNum = x
//    var secondNum = y
//    var sum = n
//
//    if(y % 2 == 0)
//        sum+=y
//
//    var z = x + y
//    firstNum = secondNum
//    secondNum = z
//
//    if(firstNum >= 4000000)
//        println(sum)
//    else
//        sumOfEvenFibonacci(firstNum, secondNum, sum)
//}

//SP 3
//PRINT THE RUN TIME IN SECONDS AT THE END OF THE PROGRAM
//The prime factors of 13195 are 5, 7, 13 and 29.
//What is the largest prime factor of the number 600851475143 ?
//
//val zero:Long = 0
//var number:Long = 600851475143
//val squareRoot:Long = sqrt(number.toDouble()).toLong()
//
//val elapsed = measureTimeMillis{
//    for(num in 2..squareRoot){
//        while(number % num == zero && number / num > 1){
//            number/=num
//        }
//    }
//    println("The biggest prime factor of 600851475143 is: $number")
//}
//println("Runtime: $elapsed milliseconds")